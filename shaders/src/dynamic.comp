#version 460

layout (std140, set = 0, binding = 0) readonly buffer Preimage {
    float32_t preimage[];
};

layout (std140, set = 0, binding = 1) readonly buffer Image {
    float32_t image[];
};

layout (std140, set = 0, binding = 2) readonly buffer Batch {
    uint batch[];
};

layout (std140, set = 0, binding = 3) readonly buffer PermutationPrefactors {
    uint permutationPrefactors[];
};

layout (std140, set = 0, binding = 4) buffer SquaredDeviations {
    uint squaredDeviations[];
};

layout (push_constant) uniform PushConstants {
    uint datapoints;
    uint preimageDimensions;
    uint batchSize;
    uint permutations;
    uint expressionSize;
};

layout (local_size = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1) in;

uint _prefactor(uint permutationIdx, uint nodeIdx);
float32_t _sample(uint batchIdx, uint dimension);

USER_FUNCTION_DECLARATIONS

void _main() {
    uint batchIdx = gl_GlobalInvocationID.x;
    uint permutationIdx = gl_GlobalInvocationID.y;
    bool skip = batchIdx >= batchSize || permutationIdx >= permutations;

    if (!skip) {
        float32_t result = EVAL;
        float32_t actual = image[batch[batchIdx]];
        float32_t deviation = result - actual;
        float32_t squaredDeviation = deviation * deviation;
        squaredDeviations[permutationIdx * batchSize + batchIdx] = squaredDeviation;
    }
}

uint _prefactor(uint permutationIdx, uint nodeIdx) {
    return permutationPrefactors[permutationIdx * expressionSize + nodeIdx];
}

float32_t _sample(uint batchIdx, uint dimension) {
    return preimage[batch[batchIdx] * preimageDimensions + dimension];
}

USER_FUNCTION_DEFINITIONS